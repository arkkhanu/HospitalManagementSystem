/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ReceptionistPortal;

import DBConnectionP.DBConnection;
import LoginForm.loginsection;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import jdk.nashorn.internal.runtime.regexp.joni.exception.ValueException;

/**
 *
 * @author AbdulRehman
 * 
 * 
*/
public class receptionist_appoinment extends javax.swing.JFrame {

    DBConnection conn = new DBConnection();
    
    int id = -1, doctorid = -1;
    String username=null, doctorname = null,appointdate = null;
    
    
    public receptionist_appoinment() {
        initComponents();
        showdate();
        showtime();
        
        _appdate_error.setVisible(false);
        _patid_error.setVisible(false);
        _phon_error.setVisible(false);
        _docdept_error.setVisible(false);
        updatata.setVisible(false);
        deletedata.setVisible(false);
        
        a_apid_tv.setText(conn.getID("select apid from Appointment ORDER BY apid DESC Fetch first 1 rows only"));
        getdoctordata();
        showdata();

    }

    public receptionist_appoinment(int id , String username) {
        initComponents();
        showdate();
        showtime();
        this.id=id;
        this.username=username;
        rr_patrecp_tv.setText(String.valueOf(id));
        receptionistname.setText(username);
        
        _appdate_error.setVisible(false);
        _patid_error.setVisible(false);
        _phon_error.setVisible(false);
        _docdept_error.setVisible(false);
        updatata.setVisible(false);
        deletedata.setVisible(false);
        
        a_apid_tv.setText(conn.getID("select apid from Appointment ORDER BY apid DESC Fetch first 1 rows only"));
        getdoctordata();
        showdata();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        registrationdate = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        a_apdocdept_ed = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        a_appatphon_ed = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        a_appatfname_ed = new javax.swing.JTextField();
        a_apdocid_combo = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        statuschk = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        a_appatbill_ed = new javax.swing.JTextField();
        a_apid_tv = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        rr_patid_ed = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        a_appatlname_ed = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        apptable = new javax.swing.JTable();
        _searching_error = new javax.swing.JLabel();
        _docdept_error = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        rr_patrecp_tv = new javax.swing.JTextField();
        receptionistname = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        a_appatid_tv = new javax.swing.JTextField();
        _patid_error = new javax.swing.JLabel();
        getingpatient = new javax.swing.JButton();
        updatata = new javax.swing.JButton();
        a_apdate_date = new com.toedter.calendar.JDateChooser();
        jLabel9 = new javax.swing.JLabel();
        _appdate_error = new javax.swing.JLabel();
        _phon_error = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        deletedata = new javax.swing.JButton();
        adddata = new javax.swing.JButton();
        ResetAll = new javax.swing.JButton();
        statusch = new javax.swing.JTextField();
        logout = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        timegetting = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        rp_registration_btn = new javax.swing.JButton();
        rp_admit_btn = new javax.swing.JButton();
        rp_bill_for_admit = new javax.swing.JButton();
        rp_opt_details = new javax.swing.JButton();
        rp_admit_details = new javax.swing.JButton();
        rp_chk_room = new javax.swing.JButton();
        rp_opt_btn = new javax.swing.JButton();
        rp_appointment_btn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(947, 708));
        setResizable(false);
        setSize(new java.awt.Dimension(947, 708));
        getContentPane().setLayout(null);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(0, 0, 0)));
        jPanel4.setLayout(null);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/p2.png"))); // NOI18N
        jPanel4.add(jLabel1);
        jLabel1.setBounds(50, 10, 130, 130);

        jPanel3.setBackground(new java.awt.Color(0, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));
        jPanel3.setLayout(null);

        registrationdate.setEditable(false);
        registrationdate.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        registrationdate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        registrationdate.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.darkGray, java.awt.Color.darkGray, java.awt.Color.darkGray));
        registrationdate.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jPanel3.add(registrationdate);
        registrationdate.setBounds(240, 10, 140, 30);

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel5.setText("Last Name");
        jPanel3.add(jLabel5);
        jLabel5.setBounds(30, 180, 70, 30);

        a_apdocdept_ed.setEditable(false);
        a_apdocdept_ed.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        a_apdocdept_ed.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.darkGray, java.awt.Color.darkGray, java.awt.Color.darkGray));
        jPanel3.add(a_apdocdept_ed);
        a_apdocdept_ed.setBounds(120, 340, 150, 30);

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel7.setText("App Date");
        jPanel3.add(jLabel7);
        jLabel7.setBounds(40, 260, 70, 30);

        a_appatphon_ed.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        a_appatphon_ed.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.darkGray, java.awt.Color.darkGray, java.awt.Color.darkGray));
        a_appatphon_ed.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                a_appatphon_edKeyTyped(evt);
            }
        });
        jPanel3.add(a_appatphon_ed);
        a_appatphon_ed.setBounds(120, 220, 150, 30);

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel8.setText("First Name");
        jPanel3.add(jLabel8);
        jLabel8.setBounds(30, 140, 70, 30);

        a_appatfname_ed.setEditable(false);
        a_appatfname_ed.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        a_appatfname_ed.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.darkGray, java.awt.Color.darkGray, java.awt.Color.darkGray));
        jPanel3.add(a_appatfname_ed);
        a_appatfname_ed.setBounds(120, 140, 150, 30);

        a_apdocid_combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Doctor" }));
        a_apdocid_combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a_apdocid_comboActionPerformed(evt);
            }
        });
        jPanel3.add(a_apdocid_combo);
        a_apdocid_combo.setBounds(120, 300, 150, 30);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel3.setText("Appoint ID : ");
        jPanel3.add(jLabel3);
        jLabel3.setBounds(30, 60, 80, 30);

        statuschk.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jPanel3.add(statuschk);
        statuschk.setBounds(20, 20, 150, 30);

        jLabel16.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel16.setText("Deptarment");
        jPanel3.add(jLabel16);
        jLabel16.setBounds(30, 340, 70, 30);

        a_appatbill_ed.setEditable(false);
        a_appatbill_ed.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        a_appatbill_ed.setText("1000");
        a_appatbill_ed.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.darkGray, java.awt.Color.darkGray, java.awt.Color.darkGray));
        a_appatbill_ed.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jPanel3.add(a_appatbill_ed);
        a_appatbill_ed.setBounds(120, 380, 60, 30);

        a_apid_tv.setEditable(false);
        a_apid_tv.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        a_apid_tv.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        a_apid_tv.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.darkGray, java.awt.Color.darkGray, java.awt.Color.darkGray));
        jPanel3.add(a_apid_tv);
        a_apid_tv.setBounds(120, 60, 59, 30);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel4.setText("Patient ID : ");
        jPanel3.add(jLabel4);
        jLabel4.setBounds(30, 100, 70, 30);

        rr_patid_ed.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        rr_patid_ed.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        rr_patid_ed.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.darkGray, java.awt.Color.darkGray, java.awt.Color.darkGray));
        rr_patid_ed.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                rr_patid_edKeyTyped(evt);
            }
        });
        jPanel3.add(rr_patid_ed);
        rr_patid_ed.setBounds(440, 110, 59, 30);

        jLabel21.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel21.setText("Doctor");
        jPanel3.add(jLabel21);
        jLabel21.setBounds(50, 300, 50, 30);

        a_appatlname_ed.setEditable(false);
        a_appatlname_ed.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        a_appatlname_ed.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.darkGray, java.awt.Color.darkGray, java.awt.Color.darkGray));
        jPanel3.add(a_appatlname_ed);
        a_appatlname_ed.setBounds(120, 180, 150, 30);

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        apptable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AppID", "PatID", "PName", "DID", "DLame", "DDept", "Status", "APDate"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        apptable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                apptableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(apptable);
        if (apptable.getColumnModel().getColumnCount() > 0) {
            apptable.getColumnModel().getColumn(0).setPreferredWidth(60);
            apptable.getColumnModel().getColumn(1).setPreferredWidth(60);
            apptable.getColumnModel().getColumn(3).setPreferredWidth(50);
            apptable.getColumnModel().getColumn(6).setPreferredWidth(80);
            apptable.getColumnModel().getColumn(7).setPreferredWidth(110);
        }

        jScrollPane2.setViewportView(jScrollPane1);

        jPanel3.add(jScrollPane2);
        jScrollPane2.setBounds(360, 150, 290, 320);

        _searching_error.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        _searching_error.setForeground(new java.awt.Color(255, 0, 0));
        _searching_error.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        _searching_error.setText("*");
        jPanel3.add(_searching_error);
        _searching_error.setBounds(500, 120, 20, 10);

        _docdept_error.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        _docdept_error.setForeground(new java.awt.Color(255, 0, 0));
        _docdept_error.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        _docdept_error.setText("*");
        jPanel3.add(_docdept_error);
        _docdept_error.setBounds(270, 310, 20, 10);

        jButton5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton5.setText("Get");
        jButton5.setBorder(new javax.swing.border.MatteBorder(null));
        jPanel3.add(jButton5);
        jButton5.setBounds(560, 110, 80, 30);

        jLabel20.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel20.setText("R ID : ");
        jPanel3.add(jLabel20);
        jLabel20.setBounds(470, 20, 40, 30);

        rr_patrecp_tv.setEditable(false);
        rr_patrecp_tv.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        rr_patrecp_tv.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        rr_patrecp_tv.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.darkGray, java.awt.Color.darkGray, java.awt.Color.darkGray));
        jPanel3.add(rr_patrecp_tv);
        rr_patrecp_tv.setBounds(520, 20, 60, 30);

        receptionistname.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        receptionistname.setText("Null");
        jPanel3.add(receptionistname);
        receptionistname.setBounds(520, 60, 120, 30);

        jLabel18.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel18.setText("R Name : ");
        jPanel3.add(jLabel18);
        jLabel18.setBounds(450, 60, 60, 30);

        a_appatid_tv.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        a_appatid_tv.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        a_appatid_tv.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.darkGray, java.awt.Color.darkGray, java.awt.Color.darkGray));
        a_appatid_tv.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                a_appatid_tvKeyTyped(evt);
            }
        });
        jPanel3.add(a_appatid_tv);
        a_appatid_tv.setBounds(120, 100, 59, 30);

        _patid_error.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        _patid_error.setForeground(new java.awt.Color(255, 0, 0));
        _patid_error.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        _patid_error.setText("*");
        jPanel3.add(_patid_error);
        _patid_error.setBounds(180, 110, 20, 10);

        getingpatient.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        getingpatient.setText("Get");
        getingpatient.setBorder(new javax.swing.border.MatteBorder(null));
        getingpatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getingpatientActionPerformed(evt);
            }
        });
        jPanel3.add(getingpatient);
        getingpatient.setBounds(210, 100, 60, 30);

        updatata.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        updatata.setText("Update");
        updatata.setBorder(new javax.swing.border.MatteBorder(null));
        updatata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatataActionPerformed(evt);
            }
        });
        jPanel3.add(updatata);
        updatata.setBounds(70, 450, 80, 30);

        a_apdate_date.setBorder(new javax.swing.border.MatteBorder(null));
        jPanel3.add(a_apdate_date);
        a_apdate_date.setBounds(120, 260, 150, 30);

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel9.setText("Phone No.");
        jPanel3.add(jLabel9);
        jLabel9.setBounds(40, 220, 70, 30);

        _appdate_error.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        _appdate_error.setForeground(new java.awt.Color(255, 0, 0));
        _appdate_error.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        _appdate_error.setText("*");
        jPanel3.add(_appdate_error);
        _appdate_error.setBounds(270, 270, 20, 10);

        _phon_error.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        _phon_error.setForeground(new java.awt.Color(255, 0, 0));
        _phon_error.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        _phon_error.setText("*");
        jPanel3.add(_phon_error);
        _phon_error.setBounds(270, 230, 20, 10);

        jLabel13.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel13.setText("Bill Fee Rs: ");
        jPanel3.add(jLabel13);
        jLabel13.setBounds(40, 380, 70, 30);

        deletedata.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        deletedata.setText("Delete");
        deletedata.setBorder(new javax.swing.border.MatteBorder(null));
        deletedata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletedataActionPerformed(evt);
            }
        });
        jPanel3.add(deletedata);
        deletedata.setBounds(230, 450, 80, 30);

        adddata.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        adddata.setText("ADD");
        adddata.setBorder(new javax.swing.border.MatteBorder(null));
        adddata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adddataActionPerformed(evt);
            }
        });
        jPanel3.add(adddata);
        adddata.setBounds(150, 450, 80, 30);

        ResetAll.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ResetAll.setText("Reset");
        ResetAll.setBorder(new javax.swing.border.MatteBorder(null));
        ResetAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetAllActionPerformed(evt);
            }
        });
        jPanel3.add(ResetAll);
        ResetAll.setBounds(210, 60, 60, 30);

        statusch.setEditable(false);
        statusch.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        statusch.setText("Empty");
        statusch.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.darkGray, java.awt.Color.darkGray, java.awt.Color.darkGray));
        jPanel3.add(statusch);
        statusch.setBounds(200, 380, 70, 30);

        jPanel4.add(jPanel3);
        jPanel3.setBounds(250, 160, 670, 500);

        logout.setBackground(new java.awt.Color(255, 255, 255));
        logout.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        logout.setText("Logout");
        logout.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 0, 51)));
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });
        jPanel4.add(logout);
        logout.setBounds(760, 70, 150, 30);

        jLabel6.setBackground(new java.awt.Color(0, 102, 153));
        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("                      Receptionist Portal");
        jLabel6.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(51, 0, 0)));
        jLabel6.setOpaque(true);
        jPanel4.add(jLabel6);
        jLabel6.setBounds(230, 50, 710, 70);

        timegetting.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        timegetting.setText("Time");
        jPanel4.add(timegetting);
        timegetting.setBounds(490, 10, 120, 30);

        jLabel12.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel12.setText("Add Appointment");
        jPanel4.add(jLabel12);
        jLabel12.setBounds(460, 120, 190, 40);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));
        jPanel2.setLayout(null);

        rp_registration_btn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rp_registration_btn.setText("Register Patient");
        rp_registration_btn.setBorder(new javax.swing.border.MatteBorder(null));
        rp_registration_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rp_registration_btnActionPerformed(evt);
            }
        });
        jPanel2.add(rp_registration_btn);
        rp_registration_btn.setBounds(10, 20, 190, 40);

        rp_admit_btn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rp_admit_btn.setText("Admit Patient");
        rp_admit_btn.setBorder(new javax.swing.border.MatteBorder(null));
        rp_admit_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rp_admit_btnActionPerformed(evt);
            }
        });
        jPanel2.add(rp_admit_btn);
        rp_admit_btn.setBounds(10, 200, 190, 40);

        rp_bill_for_admit.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rp_bill_for_admit.setText("Bill for Admit");
        rp_bill_for_admit.setBorder(new javax.swing.border.MatteBorder(null));
        rp_bill_for_admit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rp_bill_for_admitActionPerformed(evt);
            }
        });
        jPanel2.add(rp_bill_for_admit);
        rp_bill_for_admit.setBounds(10, 260, 190, 40);

        rp_opt_details.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rp_opt_details.setText("OPT Patient Detail");
        rp_opt_details.setBorder(new javax.swing.border.MatteBorder(null));
        rp_opt_details.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rp_opt_detailsActionPerformed(evt);
            }
        });
        jPanel2.add(rp_opt_details);
        rp_opt_details.setBounds(10, 440, 190, 40);

        rp_admit_details.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rp_admit_details.setText("Admited Patient Detail");
        rp_admit_details.setBorder(new javax.swing.border.MatteBorder(null));
        rp_admit_details.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rp_admit_detailsActionPerformed(evt);
            }
        });
        jPanel2.add(rp_admit_details);
        rp_admit_details.setBounds(10, 380, 190, 40);

        rp_chk_room.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rp_chk_room.setText("Check Room");
        rp_chk_room.setBorder(new javax.swing.border.MatteBorder(null));
        rp_chk_room.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rp_chk_roomActionPerformed(evt);
            }
        });
        jPanel2.add(rp_chk_room);
        rp_chk_room.setBounds(10, 320, 190, 40);

        rp_opt_btn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rp_opt_btn.setText("Add OPT");
        rp_opt_btn.setBorder(new javax.swing.border.MatteBorder(null));
        rp_opt_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rp_opt_btnActionPerformed(evt);
            }
        });
        jPanel2.add(rp_opt_btn);
        rp_opt_btn.setBounds(10, 80, 190, 40);

        rp_appointment_btn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rp_appointment_btn.setText("Appoinment");
        rp_appointment_btn.setBorder(new javax.swing.border.MatteBorder(null));
        rp_appointment_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rp_appointment_btnActionPerformed(evt);
            }
        });
        jPanel2.add(rp_appointment_btn);
        rp_appointment_btn.setBounds(10, 140, 190, 40);

        jPanel4.add(jPanel2);
        jPanel2.setBounds(20, 160, 210, 500);

        getContentPane().add(jPanel4);
        jPanel4.setBounds(0, 0, 940, 680);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    void showtime(){
        new Timer(0, (ActionEvent ae) -> {
            Date d = new Date();
            SimpleDateFormat t = new SimpleDateFormat("hh:mm:ss a");
            timegetting.setText(t.format(d));
        }).start();   
    }
    
    void showdate(){
        new Timer(0, (ActionEvent ae) -> {
            Date d = new Date();
            SimpleDateFormat t = new SimpleDateFormat("yyyy-MM-dd");
            registrationdate.setText(t.format(d));
        }).start(); 
    }
    
    private void getdoctordata(){
    
        try{
            conn.OpenConnection();
            String query="select did from doctor";
            conn.GetData(query);
            while(conn.rst.next()){
                int did =conn.rst.getInt("did");
                a_apdocid_combo.addItem(String.valueOf(did));
            }
            conn.CloseConnection();
        }catch(SQLException e){ System.out.println(e);}
    }
    
    private void showdata(){
        ArrayList<receptionistpatientclass.appointmentclass> list = userlist();
        DefaultTableModel model = (DefaultTableModel) apptable.getModel();
        Object[] row = new Object[8];
        for(int i=0 ; i<list.size() ; i++){
            row[0] = list.get(i).getApid();
            row[1] = list.get(i).getRpid();
            row[2] = list.get(i).getPfname();
            row[3] = list.get(i).getDid();
            row[4] = list.get(i).getDfname();
            row[5] = list.get(i).getDdeptward();
            row[6] = list.get(i).getStatus();
            row[7] = list.get(i).getApdate();
            model.addRow(row);
            System.out.println(list.get(i).getRegdate());
        }
    }
    
    private ArrayList<receptionistpatientclass.appointmentclass> userlist() {
            ArrayList<receptionistpatientclass.appointmentclass> userList = new ArrayList<>();
            try{
//(apid,rpid,did, billamount,age, pfname, plname, rfname, rlname, dfname, dlname, ddeptward, pphno, status, apdate,  regdate,gender)                               
                conn.OpenConnection();
                String selectquery="select apid,p.rpid,p.age,gname,d.did ,a.regdate,apphno ,fname , lname , rfname , rlname , dfname , dlname , bill , status , apdate , wname from appointment a , regpatient p , recept r , doctor d , deptward w , gender g where a.rpid=p.rpid and a.rid=r.rid and a.did=d.did and d.dwid=w.wid and p.sexid=g.gid order by apid desc";
//select apid,p.rpid,p.age,gname,d.did ,a.regdate,apphno ,fname , lname , rfname , rlname , dfname , dlname , bill , status , apdate , wname from appointment a , regpatient p , recept r , doctor d , deptward w , gender g where a.rpid=p.rpid and a.rid=r.rid and a.did=d.did and d.dwid=w.wid and p.sexid=g.gid order by apid desc";
                conn.GetData(selectquery);
                receptionistpatientclass rpc = new receptionistpatientclass();
                receptionistpatientclass.appointmentclass apt;
                while(conn.rst.next()){
                    apt = rpc.new appointmentclass(
                    conn.rst.getInt("apid"),
                    conn.rst.getInt("rpid"),
                    conn.rst.getInt("did"),        
                    conn.rst.getInt("bill"),
                    conn.rst.getInt("age"),
                    conn.rst.getString("fname"),
                    conn.rst.getString("lname"),
                    conn.rst.getString("rfname"),
                    conn.rst.getString("rlname"),
                    conn.rst.getString("dfname"),
                    conn.rst.getString("dlname"),
                    conn.rst.getString("wname"),
                    conn.rst.getString("apphno"),        
                    conn.rst.getString("status"),
                    conn.rst.getString("apdate"),
                    conn.rst.getString("regdate"),
                    conn.rst.getString("gname")
                    );
                 userList.add(apt);   
                }
                
            }catch(SQLException e ){System.out.println(e);}
        
     return userList;
    }
    
    private void rr_patid_edKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rr_patid_edKeyTyped
        
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE)  || (c==KeyEvent.VK_DELETE) )){
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_rr_patid_edKeyTyped

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        LoginForm.loginsection lfl = new loginsection();
        lfl.setVisible(true);
        dispose();
    }//GEN-LAST:event_logoutActionPerformed

    private void rp_registration_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rp_registration_btnActionPerformed
        receptionist_mainmenu rmm = new receptionist_mainmenu(id,username);
        rmm.setVisible(true);
        dispose();
    }//GEN-LAST:event_rp_registration_btnActionPerformed

    private void rp_admit_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rp_admit_btnActionPerformed
        receptionist_admitpatient radp = new receptionist_admitpatient(id,username);
        radp.setVisible(true);
        dispose();
    }//GEN-LAST:event_rp_admit_btnActionPerformed

    private void rp_bill_for_admitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rp_bill_for_admitActionPerformed
        receptionist_billforadmit rba = new receptionist_billforadmit(id,username);
        rba.setVisible(true);
        dispose();
    }//GEN-LAST:event_rp_bill_for_admitActionPerformed

    private void rp_opt_detailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rp_opt_detailsActionPerformed
        receptionist_optdetail roptd = new receptionist_optdetail(id,username);
        roptd.setVisible(true);
        dispose();
    }//GEN-LAST:event_rp_opt_detailsActionPerformed

    private void rp_admit_detailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rp_admit_detailsActionPerformed
        receptionist_admitpatientdetail adpd = new receptionist_admitpatientdetail(id,username);
        adpd.setVisible(true);
        dispose();
    }//GEN-LAST:event_rp_admit_detailsActionPerformed

    private void rp_chk_roomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rp_chk_roomActionPerformed
        receptionist_checkroom rchr  = new receptionist_checkroom(id,username);
        rchr.setVisible(true);
        dispose();
    }//GEN-LAST:event_rp_chk_roomActionPerformed

    private void rp_opt_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rp_opt_btnActionPerformed
        receptionist_opt ropt = new receptionist_opt(id,username);
        ropt.setVisible(true);
        dispose();
    }//GEN-LAST:event_rp_opt_btnActionPerformed

    private void rp_appointment_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rp_appointment_btnActionPerformed
        receptionist_appoinment rap = new receptionist_appoinment(id,username);
        rap.setVisible(true);
        dispose();
    }//GEN-LAST:event_rp_appointment_btnActionPerformed

    private void a_appatid_tvKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_a_appatid_tvKeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE)  || (c==KeyEvent.VK_DELETE) )){
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_a_appatid_tvKeyTyped

    private void a_appatphon_edKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_a_appatphon_edKeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE)  || (c==KeyEvent.VK_DELETE) )){
            getToolkit().beep();
            evt.consume();
        }
        
       if(a_appatphon_ed.getText().length() ==11 ){
           if((Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE)  || (c==KeyEvent.VK_DELETE) )){
                getToolkit().beep();
                evt.consume();
            }
       }
       
       if(a_appatphon_ed.getText().length() == 11){
           a_appatphon_ed.requestFocusInWindow();
           
       }
    }//GEN-LAST:event_a_appatphon_edKeyTyped

    private void getingpatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getingpatientActionPerformed
        
        if(a_appatid_tv.getText().equals("")){_patid_error.setVisible(true);}
        else{
            boolean ispresnt1 = false;
            _patid_error.setVisible(false);
            try{
                conn.OpenConnection();
                String query = "select rpid , fname,lname,phno from RegPatient where rpid="+a_appatid_tv.getText();
                conn.GetData(query);
                while(conn.rst.next()){
                    ispresnt1 = true;
                    a_appatfname_ed.setText(conn.rst.getString("fname"));
                    a_appatlname_ed.setText(conn.rst.getString("lname"));
                    a_appatphon_ed.setText(conn.rst.getString("phno"));
                   break;
                }
                conn.CloseConnection();
                if(ispresnt1 == false){
                    a_appatfname_ed.setText("");
                    a_appatlname_ed.setText("");
                    a_appatphon_ed.setText("");
                    JOptionPane.showMessageDialog(null, "Sorry Not Found such Patient");
                    
                }
            }catch(SQLException e ){System.out.println(e);}
            
        }
    }//GEN-LAST:event_getingpatientActionPerformed

    private void a_apdocid_comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_a_apdocid_comboActionPerformed
        if(a_apdocid_combo.getSelectedItem().equals("Select Doctor")){ ;doctorname=null;}
        else{
            _docdept_error.setVisible(false);
            doctorname=String.valueOf(a_apdocid_combo.getSelectedItem());
            
            try{
                String query= "select did , wname from doctor d1 , deptward dw where d1.dwid=dw.wid";
                conn.OpenConnection();
                conn.GetData(query);
                while(conn.rst.next()){
                int    s1 = conn.rst.getInt("did");
                String s2 = conn.rst.getString("wname");
                if(s1 == Integer.valueOf(doctorname)){
                    doctorid=s1;
                    a_apdocdept_ed.setText(s2);
//                    System.out.println(s1 + " : " + s2 + " : " + doctorid); 
                  }
                }
                conn.CloseConnection();
            }catch(SQLException |ValueException e){System.out.println(e);}
        }
    }//GEN-LAST:event_a_apdocid_comboActionPerformed

    private void apptableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_apptableMouseClicked
            _appdate_error.setVisible(false);
            _patid_error.setVisible(false);
            _phon_error.setVisible(false);
            _docdept_error.setVisible(false);
            
            adddata.setVisible(false);
            updatata.setVisible(true);
            deletedata.setVisible(true);
            
        int i = apptable.getSelectedRow();
        TableModel model = apptable.getModel();
        a_apid_tv.setText(model.getValueAt(i,0).toString());
        int id = Integer.valueOf(a_apid_tv.getText());
        ArrayList<receptionistpatientclass.appointmentclass> listing = userlist();
        for(int j=0 ; j<listing.size() ; j++){
            if(listing.get(j).getApid()== id){
                a_appatid_tv.setText(String.valueOf(listing.get(j).getRpid()));
                a_appatfname_ed.setText(String.valueOf(listing.get(j).getPfname()));
                a_appatlname_ed.setText(String.valueOf(listing.get(j).getPlname()));
                a_appatphon_ed.setText(String.valueOf(listing.get(j).getPphno()));
                try{
                    
                    Date dobdatee=new SimpleDateFormat("yyyy-MM-dd").parse(listing.get(j).getApdate()); 
                    a_apdate_date.setDate(dobdatee);
                }catch(ParseException e ){System.out.println(e);}
                a_apdocid_combo.setSelectedItem(String.valueOf(listing.get(j).getDid()));
                a_apdocdept_ed.setText(String.valueOf(listing.get(j).getDdeptward()));
                a_appatbill_ed.setText(String.valueOf(listing.get(j).getBillamount()));
                statusch.setText(String.valueOf(listing.get(j).getStatus()));
               
                break;
            }
        }
    }//GEN-LAST:event_apptableMouseClicked

    private void adddataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adddataActionPerformed
        
        boolean emptyfiled = false;
        boolean datechk = false;
        if(a_appatid_tv.getText().equals("")){_patid_error.setVisible(true);emptyfiled=false;}
        if(a_appatphon_ed.getText().equals("")){_phon_error.setVisible(true);emptyfiled=false;}
        if(a_apdocid_combo.getSelectedItem().equals("Select Doctor")){_docdept_error.setVisible(true);emptyfiled=false;}
        if(a_apdate_date.getDate() == null){_appdate_error.setVisible(true);emptyfiled=false;}
        
        try{
            SimpleDateFormat t = new SimpleDateFormat("yyyy-MM-dd");
            if(a_apdate_date.getDate() != null){
                _appdate_error.setVisible(false);
                appointdate= t.format(a_apdate_date.getDate());
                String today = registrationdate.getText();
                long diff = -1;
                Date d1 = t.parse(appointdate);
                Date d2 = t.parse(today);
                diff = d1.getDate()-d2.getDate();
                if(diff <=0){JOptionPane.showMessageDialog(null,"Can not Appoint today \nPlease select Future date ");datechk=false;}
                if(diff >= 1){datechk=true;}
//                System.out.println(diff);
            }
            else{
             _appdate_error.setVisible(true);
            }
        }catch(ParseException e ){System.out.println(e);}
        
        if(!a_appatid_tv.getText().isEmpty()
           && !a_appatphon_ed.getText().isEmpty()
           && !a_apdocid_combo.getSelectedItem().equals("Select Doctor")
           && a_apdate_date.getDate() != null
           && datechk==true){ emptyfiled = true;}
        
        if(emptyfiled == false){JOptionPane.showMessageDialog(null, "Please Fill the Fileds");}
        
        if(emptyfiled == true && datechk == true){
            _appdate_error.setVisible(false);
            _patid_error.setVisible(false);
            _phon_error.setVisible(false);
            _docdept_error.setVisible(false);
            
           try{
               conn.OpenConnection();
               String status = "Empty";
               String query = "insert into Appointment(rpid,rid,did,bill,status,apdate,regdate,apphno) values ("
                +a_appatid_tv.getText()+" , "+rr_patrecp_tv.getText()+" , "+doctorid+" ,"+a_appatbill_ed.getText()
                +" , '"+status+"' , to_date('"+appointdate+"','yyyy-MM-dd'),to_date('"+registrationdate.getText()
                +"','yyyy-MM-dd') , '"+a_appatphon_ed.getText()+"' )";
               int flag = conn.InsertUpdateDelete(query);
               if(flag==1){
                    JOptionPane.showMessageDialog(null,"Successfully Inserted..!");  
                    a_apid_tv.setText(conn.getID("select apid from Appointment ORDER BY apid DESC Fetch first 1 rows only"));
                    
                    a_apdate_date.setDate(null);
                    a_appatid_tv.setText("");
                    a_appatfname_ed.setText("");
                    a_appatlname_ed.setText("");
                    a_appatphon_ed.setText("");
                    a_apdocid_combo.setSelectedIndex(0);
                    a_apdocdept_ed.setText("");
                    statuschk.setText("");
                    
                    DefaultTableModel model1 = (DefaultTableModel) apptable.getModel();
                    model1.setRowCount(0);
                    showdata();
               }
            conn.CloseConnection();
           }catch(HeadlessException e){System.out.println(e);}
           
        
        }
        
    }//GEN-LAST:event_adddataActionPerformed

    private void deletedataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletedataActionPerformed
        int yesorno = JOptionPane.showConfirmDialog(null,"Do you want to Delete ","Deleted Record" , JOptionPane.YES_NO_OPTION);
        
        if(yesorno==0){
            int row = apptable.getSelectedRow();
            int value = Integer.parseInt((apptable.getModel().getValueAt(row, 0).toString()));
            try{
                conn.OpenConnection();
                String query="delete from Appointment where apid="+value;
                int flag = conn.InsertUpdateDelete(query);
                if(flag==1){
                    JOptionPane.showMessageDialog(null,"Successfully Deleted..!");
                    DefaultTableModel model1 = (DefaultTableModel) apptable.getModel();
                    model1.setRowCount(0);
                    showdata();
                    a_apdate_date.setDate(null);
                    a_appatid_tv.setText("");
                    a_appatfname_ed.setText("");
                    a_appatlname_ed.setText("");
                    a_appatphon_ed.setText("");
                    a_apdocid_combo.setSelectedIndex(0);
                    a_apdocdept_ed.setText("");
                    statuschk.setText("");
                    
                    updatata.setVisible(false);
                    deletedata.setVisible(false);
                    adddata.setVisible(true);
                }
            }catch(HeadlessException e ){System.out.println(e);}
        }
        else{
        JOptionPane.showMessageDialog(null,"Delete Canceled..!");
        }
    }//GEN-LAST:event_deletedataActionPerformed

    private void updatataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatataActionPerformed
        
        boolean emptyfiled = false;
        boolean datechk = false;
        if(a_appatid_tv.getText().equals("")){_patid_error.setVisible(true);emptyfiled=false;}
        if(a_appatphon_ed.getText().equals("")){_phon_error.setVisible(true);emptyfiled=false;}
        if(a_apdocid_combo.getSelectedItem().equals("Select Doctor")){_docdept_error.setVisible(true);emptyfiled=false;}
        if(a_apdate_date.getDate() == null){_appdate_error.setVisible(true);emptyfiled=false;}
        
        try{
            SimpleDateFormat t = new SimpleDateFormat("yyyy-MM-dd");
            if(a_apdate_date.getDate() != null){
                _appdate_error.setVisible(false);
                appointdate= t.format(a_apdate_date.getDate());
                String today = registrationdate.getText();
                long diff = -1;
                Date d1 = t.parse(appointdate);
                Date d2 = t.parse(today);
                diff = d1.getDate()-d2.getDate();
                if(diff <=0){JOptionPane.showMessageDialog(null,"Can not Appoint today \nPlease select Future date ");datechk=false;}
                if(diff >= 1){datechk=true;}
//                System.out.println(diff);
            }
            else{
             _appdate_error.setVisible(true);
            }
        }catch(ParseException e ){System.out.println(e);}
        
        if(!a_appatid_tv.getText().isEmpty()
           && !a_appatphon_ed.getText().isEmpty()
           && !a_apdocid_combo.getSelectedItem().equals("Select Doctor")
           && a_apdate_date.getDate() != null
           && datechk==true){ emptyfiled = true;}
        
        if(emptyfiled == false){JOptionPane.showMessageDialog(null, "Please Fill the Fileds");}
        
        if(emptyfiled == true && datechk == true){
            _appdate_error.setVisible(false);
            _patid_error.setVisible(false);
            _phon_error.setVisible(false);
            _docdept_error.setVisible(false);
            
           try{
               int row = apptable.getSelectedRow();
                int value = Integer.parseInt((apptable.getModel().getValueAt(row, 0).toString()));
               conn.OpenConnection();
               String status = "Empty";
               String query = "update Appointment set rpid="+a_appatid_tv.getText()+" , rid="+rr_patrecp_tv.getText()
                +" , did ="+doctorid+" , bill ="+a_appatbill_ed.getText()+" , status ='"+status
                +"' ,apdate = to_date('"+appointdate+"','yyyy-MM-dd') , regdate =to_date('"+registrationdate.getText()
                +"','yyyy-MM-dd') , apphno ="+a_appatphon_ed.getText()+" where apid="+value;
               int flag = conn.InsertUpdateDelete(query);
               if(flag==1){
                    JOptionPane.showMessageDialog(null,"Successfully Updated..!");  
                    a_apid_tv.setText(conn.getID("select apid from Appointment ORDER BY apid DESC Fetch first 1 rows only"));
                    
                    a_apdate_date.setDate(null);
                    a_appatid_tv.setText("");
                    a_appatfname_ed.setText("");
                    a_appatlname_ed.setText("");
                    a_appatphon_ed.setText("");
                    a_apdocid_combo.setSelectedIndex(0);
                    a_apdocdept_ed.setText("");
                    statuschk.setText("");
                    
                    DefaultTableModel model1 = (DefaultTableModel) apptable.getModel();
                    model1.setRowCount(0);
                    showdata();
               }
            conn.CloseConnection();
           }catch(HeadlessException e){System.out.println(e);}
         
        }
    }//GEN-LAST:event_updatataActionPerformed

    private void ResetAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetAllActionPerformed
        updatata.setVisible(false);
        deletedata.setVisible(false);
        _appdate_error.setVisible(false);
        _patid_error.setVisible(false);
        _phon_error.setVisible(false);
        _docdept_error.setVisible(false);
        adddata.setVisible(true);
        
        a_apid_tv.setText(conn.getID("select apid from Appointment ORDER BY apid DESC Fetch first 1 rows only"));

        a_apdate_date.setDate(null);
        a_appatid_tv.setText("");
        a_appatfname_ed.setText("");
        a_appatlname_ed.setText("");
        a_appatphon_ed.setText("");
        a_apdocid_combo.setSelectedIndex(0);
        a_apdocdept_ed.setText("");
        statuschk.setText("");
        
    }//GEN-LAST:event_ResetAllActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(receptionist_appoinment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(receptionist_appoinment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(receptionist_appoinment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(receptionist_appoinment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new receptionist_appoinment().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ResetAll;
    private javax.swing.JLabel _appdate_error;
    private javax.swing.JLabel _docdept_error;
    private javax.swing.JLabel _patid_error;
    private javax.swing.JLabel _phon_error;
    private javax.swing.JLabel _searching_error;
    private com.toedter.calendar.JDateChooser a_apdate_date;
    private javax.swing.JTextField a_apdocdept_ed;
    private javax.swing.JComboBox<String> a_apdocid_combo;
    private javax.swing.JTextField a_apid_tv;
    private javax.swing.JTextField a_appatbill_ed;
    private javax.swing.JTextField a_appatfname_ed;
    private javax.swing.JTextField a_appatid_tv;
    private javax.swing.JTextField a_appatlname_ed;
    private javax.swing.JTextField a_appatphon_ed;
    private javax.swing.JButton adddata;
    private javax.swing.JTable apptable;
    private javax.swing.JButton deletedata;
    private javax.swing.JButton getingpatient;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton logout;
    private javax.swing.JLabel receptionistname;
    private javax.swing.JTextField registrationdate;
    private javax.swing.JButton rp_admit_btn;
    private javax.swing.JButton rp_admit_details;
    private javax.swing.JButton rp_appointment_btn;
    private javax.swing.JButton rp_bill_for_admit;
    private javax.swing.JButton rp_chk_room;
    private javax.swing.JButton rp_opt_btn;
    private javax.swing.JButton rp_opt_details;
    private javax.swing.JButton rp_registration_btn;
    private javax.swing.JTextField rr_patid_ed;
    private javax.swing.JTextField rr_patrecp_tv;
    private javax.swing.JTextField statusch;
    private javax.swing.JLabel statuschk;
    private javax.swing.JLabel timegetting;
    private javax.swing.JButton updatata;
    // End of variables declaration//GEN-END:variables
}
